// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  email String @unique
  password String
  firstName String
  lastName String
  phoneNumber String?
  gender Gender? @default(other)
  birthDate DateTime? @db.Date 
  avatar String?
  refreshToken String?

  // Relation fields
  products Product[]
  reviews Review[]
  locations Location[]
}

model Location {
  id String @id @default(uuid())
  country String
  state String
  city String
  street String
  zipCode String?
  latitude Float
  longitude Float

  // Relation fields
  user User @relation(fields: [userId], references: [id])
  userId String
}

model Product{
  id String @id @default(uuid())
  title String
  price Float
  description String? @db.VarChar(3000)
  isAvailable Boolean? @default(true)

  // Relation fields
  author User @relation(fields: [authorId], references: [id])
  authorId String
  currency Currency @relation(fields: [currencyId], references: [id])  
  currencyId String
  productImages ProductImage[]
  reviews Review[]
  productCategory ProductCategory[]
}

model Currency{
  id String @id @default(uuid())
  currency String
  code String

  // Relation fields
  products Product[]
}

model Review{
  id String @id @default(uuid())
  comments String @db.VarChar(4000)

  // Relation fields
  author User @relation(fields: [authorId], references: [id])
  authorId String
  product Product @relation(fields: [productId], references: [id])
  productId String
}

model ProductImage{
  id String @id @default(uuid())
  publicId String
  url String

  // Relation fields
  product Product? @relation(fields: [productId], references: [id])
  productId String
}

model Category {
  id String @id @default(uuid())
  title String @unique
  
  // Relation fields
  subCategories Category[] @relation("SubCategory")
  parent Category? @relation("SubCategory", fields: [parentId], references: [id])
  parentId String?

  productCategory ProductCategory[]
}

model ProductCategory {
  id String @id @default(uuid())

  // Relation fields
  product Product @relation(fields: [productId], references: [id])
  productId String

  category Category @relation(fields: [categoryId], references: [id])
  categoryId String
}

enum Gender{
  male
  female
  other
}